/*
 * Autor: Lucas Costa Fuganti
 * V360 - ToDo List
 */
package View;

import Controller.DAO;
import Controller.JDBCUtil;
import Model.Item;
import Model.Lista;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Types;
import java.util.Vector;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Lucas
 */
public class Main extends javax.swing.JFrame {

    DAO dao = new DAO();
    JDBCUtil jdbc = new JDBCUtil();
    /**
     * Creates new form Main
     */
    public Main() {
        initComponents();
        dao.CriaConexao();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelBackground = new javax.swing.JPanel();
        jLabelHeader = new javax.swing.JLabel();
        jLabelListas = new javax.swing.JLabel();
        jLabelItems = new javax.swing.JLabel();
        jButtonCriarLista = new javax.swing.JButton();
        jButtonEditarLista = new javax.swing.JButton();
        jButtonExcluirLista = new javax.swing.JButton();
        jButtonCriarItem = new javax.swing.JButton();
        jButtonEditarItem = new javax.swing.JButton();
        jButtonExcluirItem = new javax.swing.JButton();
        jButtonStatusItem = new javax.swing.JButton();
        jTextFieldLista = new javax.swing.JTextField();
        jTextFieldItem = new javax.swing.JTextField();
        jLabelNomeLista = new javax.swing.JLabel();
        jLabelDescItem = new javax.swing.JLabel();
        jScrollPaneListas = new javax.swing.JScrollPane();
        jTableListas = new javax.swing.JTable();
        jScrollPaneItems = new javax.swing.JScrollPane();
        jTableItems = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("ToDo List");
        setBackground(new java.awt.Color(153, 255, 153));
        setForeground(new java.awt.Color(153, 255, 153));
        setMinimumSize(new java.awt.Dimension(700, 500));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanelBackground.setBackground(new java.awt.Color(44, 26, 85));
        jPanelBackground.setForeground(new java.awt.Color(44, 26, 85));
        jPanelBackground.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jPanelBackground.setPreferredSize(new java.awt.Dimension(700, 500));
        jPanelBackground.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabelHeader.setFont(new java.awt.Font("Verdana", 1, 48)); // NOI18N
        jLabelHeader.setForeground(new java.awt.Color(255, 112, 10));
        jLabelHeader.setText("V360");
        jPanelBackground.add(jLabelHeader, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 20, -1, -1));

        jLabelListas.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        jLabelListas.setForeground(new java.awt.Color(242, 242, 242));
        jLabelListas.setText("LISTAS");
        jPanelBackground.add(jLabelListas, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 100, -1, -1));

        jLabelItems.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        jLabelItems.setForeground(new java.awt.Color(242, 242, 242));
        jLabelItems.setText("ITEMS");
        jPanelBackground.add(jLabelItems, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 100, -1, -1));

        jButtonCriarLista.setBackground(new java.awt.Color(255, 112, 10));
        jButtonCriarLista.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        jButtonCriarLista.setForeground(new java.awt.Color(242, 242, 242));
        jButtonCriarLista.setText("Nova Lista");
        jButtonCriarLista.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCriarListaActionPerformed(evt);
            }
        });
        jPanelBackground.add(jButtonCriarLista, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 350, 135, -1));

        jButtonEditarLista.setBackground(new java.awt.Color(255, 112, 10));
        jButtonEditarLista.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        jButtonEditarLista.setForeground(new java.awt.Color(242, 242, 242));
        jButtonEditarLista.setText("Editar Nome");
        jButtonEditarLista.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEditarListaActionPerformed(evt);
            }
        });
        jPanelBackground.add(jButtonEditarLista, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 380, 135, -1));

        jButtonExcluirLista.setBackground(new java.awt.Color(255, 112, 10));
        jButtonExcluirLista.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        jButtonExcluirLista.setForeground(new java.awt.Color(242, 242, 242));
        jButtonExcluirLista.setText("Excluir Lista");
        jButtonExcluirLista.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExcluirListaActionPerformed(evt);
            }
        });
        jPanelBackground.add(jButtonExcluirLista, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 410, 135, -1));

        jButtonCriarItem.setBackground(new java.awt.Color(255, 112, 10));
        jButtonCriarItem.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        jButtonCriarItem.setForeground(new java.awt.Color(242, 242, 242));
        jButtonCriarItem.setText("Novo Item");
        jButtonCriarItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCriarItemActionPerformed(evt);
            }
        });
        jPanelBackground.add(jButtonCriarItem, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 350, 135, -1));

        jButtonEditarItem.setBackground(new java.awt.Color(255, 112, 10));
        jButtonEditarItem.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        jButtonEditarItem.setForeground(new java.awt.Color(242, 242, 242));
        jButtonEditarItem.setText("Editar Descrição");
        jButtonEditarItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEditarItemActionPerformed(evt);
            }
        });
        jPanelBackground.add(jButtonEditarItem, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 350, -1, -1));

        jButtonExcluirItem.setBackground(new java.awt.Color(255, 112, 10));
        jButtonExcluirItem.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        jButtonExcluirItem.setForeground(new java.awt.Color(242, 242, 242));
        jButtonExcluirItem.setText("Excluir Item");
        jButtonExcluirItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExcluirItemActionPerformed(evt);
            }
        });
        jPanelBackground.add(jButtonExcluirItem, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 380, 135, -1));

        jButtonStatusItem.setBackground(new java.awt.Color(255, 112, 10));
        jButtonStatusItem.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        jButtonStatusItem.setForeground(new java.awt.Color(242, 242, 242));
        jButtonStatusItem.setText("Alterar Status");
        jButtonStatusItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonStatusItemActionPerformed(evt);
            }
        });
        jPanelBackground.add(jButtonStatusItem, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 380, 135, -1));

        jTextFieldLista.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldListaKeyReleased(evt);
            }
        });
        jPanelBackground.add(jTextFieldLista, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 310, 220, -1));

        jTextFieldItem.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldItemKeyReleased(evt);
            }
        });
        jPanelBackground.add(jTextFieldItem, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 310, 300, -1));

        jLabelNomeLista.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabelNomeLista.setForeground(new java.awt.Color(242, 242, 242));
        jLabelNomeLista.setText("Nome da Lista");
        jPanelBackground.add(jLabelNomeLista, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 290, -1, -1));

        jLabelDescItem.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabelDescItem.setForeground(new java.awt.Color(242, 242, 242));
        jLabelDescItem.setText("Descrição do Item");
        jPanelBackground.add(jLabelDescItem, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 290, -1, -1));

        jScrollPaneListas.setBorder(null);
        jScrollPaneListas.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N

        jTableListas.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jTableListas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "ID", "Nome"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableListas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTableListasMouseReleased(evt);
            }
        });
        jScrollPaneListas.setViewportView(jTableListas);
        if (jTableListas.getColumnModel().getColumnCount() > 0) {
            jTableListas.getColumnModel().getColumn(0).setPreferredWidth(40);
            jTableListas.getColumnModel().getColumn(1).setMinWidth(180);
            jTableListas.getColumnModel().getColumn(1).setPreferredWidth(180);
            jTableListas.getColumnModel().getColumn(1).setMaxWidth(180);
        }

        jPanelBackground.add(jScrollPaneListas, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 130, 220, 154));

        jScrollPaneItems.setBorder(null);
        jScrollPaneItems.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N

        jTableItems.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jTableItems.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Descrição", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPaneItems.setViewportView(jTableItems);
        if (jTableItems.getColumnModel().getColumnCount() > 0) {
            jTableItems.getColumnModel().getColumn(0).setMinWidth(40);
            jTableItems.getColumnModel().getColumn(0).setPreferredWidth(40);
            jTableItems.getColumnModel().getColumn(0).setMaxWidth(40);
            jTableItems.getColumnModel().getColumn(1).setMinWidth(180);
            jTableItems.getColumnModel().getColumn(1).setPreferredWidth(180);
            jTableItems.getColumnModel().getColumn(1).setMaxWidth(180);
            jTableItems.getColumnModel().getColumn(2).setMinWidth(80);
            jTableItems.getColumnModel().getColumn(2).setPreferredWidth(80);
            jTableItems.getColumnModel().getColumn(2).setMaxWidth(80);
        }

        jPanelBackground.add(jScrollPaneItems, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 130, 300, 154));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelBackground, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelBackground, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Criar uma nova lista
    private void jButtonCriarListaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCriarListaActionPerformed
        DefaultTableModel listas = (DefaultTableModel)jTableListas.getModel();
        DefaultTableModel items = (DefaultTableModel)jTableItems.getModel();
        try {
            if(!jTextFieldLista.getText().equals("")) {
                if(dao.inserir(new Lista(jTextFieldLista.getText()))) {
                    limpaCampoLista();
                    dao.consultarTodos(dao.getPropLista());
                    preencherListas(listas);
                    items.setRowCount(0);
                    JOptionPane.showMessageDialog(this,
                                "Nova lista criada com sucesso!",
                                "Lista criada",
                                JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(this,
                            "Ocorreu um erro ao registrar a lista no banco de dados.",
                            "Erro de criação",
                            JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this,
                            "Lista não criada: a lista deve ter um nome.",
                            "Campo não preenchido",
                            JOptionPane.ERROR_MESSAGE);
                jTextFieldLista.requestFocus();
            }
        } catch(Exception e) {
            JOptionPane.showMessageDialog(this,
                "Ocorreu um erro ao tentar criar a lista. Por favor, tente novamente.",
                "Ocorreu um erro",
                JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButtonCriarListaActionPerformed

    // Editar uma lista
    private void jButtonEditarListaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEditarListaActionPerformed
        DefaultTableModel listas = (DefaultTableModel)jTableListas.getModel();
        DefaultTableModel items = (DefaultTableModel)jTableItems.getModel();
        if(jTableListas.getSelectionModel().isSelectionEmpty()) {
            JOptionPane.showMessageDialog(this,
                        "Dados não atualizados: favor selecionar a lista a ser alterada.",
                        "Falha de atualização",
                        JOptionPane.ERROR_MESSAGE);
        } else if(jTextFieldLista.getText().equals("")) {
            JOptionPane.showMessageDialog(this,
                        "Lista não alterada: a lista deve ter um nome.",
                        "Campo não preenchido",
                        JOptionPane.ERROR_MESSAGE);
                jTextFieldLista.requestFocus();
        } else {
            try {
                dao.alterar(new Lista(Integer.parseInt(jTableListas.getValueAt(jTableListas.getSelectedRow(), 0).toString()), jTextFieldLista.getText()));
                jTableListas.getSelectionModel().clearSelection();
                limpaCampoLista();
                dao.consultarTodos(dao.getPropLista());
                preencherListas(listas);
                items.setRowCount(0);
                JOptionPane.showMessageDialog(this,
                                "Lista atualizada com sucesso!",
                                "Atualização concluída",
                                JOptionPane.INFORMATION_MESSAGE);
            } catch(Exception e) {
                JOptionPane.showMessageDialog(this,
                "Ocorreu um erro ao tentar alterar a lista. Por favor, tente novamente.",
                "Ocorreu um erro",
                JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jButtonEditarListaActionPerformed

    // Excluir uma lista
    private void jButtonExcluirListaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExcluirListaActionPerformed
        DefaultTableModel listas = (DefaultTableModel)jTableListas.getModel();
        DefaultTableModel items = (DefaultTableModel)jTableItems.getModel();
        if(jTableListas.getSelectionModel().isSelectionEmpty()) {
            JOptionPane.showMessageDialog(this,
                        "Nenhuma lista excluída: favor selecionar a lista a ser excluída.",
                        "Falha ao excluir",
                        JOptionPane.ERROR_MESSAGE);
        } else {
            try {
                dao.excluir(Integer.parseInt(jTableListas.getValueAt(jTableListas.getSelectedRow(), 0).toString()), dao.getPropLista());
                jTableListas.getSelectionModel().clearSelection();
                limpaCampoLista();
                dao.consultarTodos(dao.getPropLista());
                preencherListas(listas);
                items.setRowCount(0);
                JOptionPane.showMessageDialog(this,
                                "Lista Excluída com sucesso!",
                                "Lista Excluída",
                                JOptionPane.INFORMATION_MESSAGE);
            } catch(Exception e) {
                JOptionPane.showMessageDialog(this,
                            "Ocorreu um erro ao tentar excluir a lista. Por favor, tente novamente.",
                            "Ocorreu um erro",
                            JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jButtonExcluirListaActionPerformed

    // Criar um novo item
    private void jButtonCriarItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCriarItemActionPerformed
        DefaultTableModel items = (DefaultTableModel)jTableItems.getModel();
        try {
            if(!jTableListas.getSelectionModel().isSelectionEmpty()) {
                if(!jTextFieldItem.getText().equals("")) {
                    if(dao.inserir(new Item(
                            Integer.parseInt(jTableListas.getValueAt(jTableListas.getSelectedRow(), 0).toString()),
                            jTextFieldItem.getText()
                    ))) {
                        limpaCampoItem();
                        buscaItemsPorLista();
                        preencherItems(items);
                        JOptionPane.showMessageDialog(this,
                                "Novo item criado com sucesso!",
                                "Item criado",
                                JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        JOptionPane.showMessageDialog(this,
                                "Ocorreu um erro ao registrar o item no banco de dados.",
                                "Erro de criação",
                                JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(this,
                                    "Item não criado: o item deve ter uma descrição.",
                                    "Campo não preenchido",
                                    JOptionPane.ERROR_MESSAGE);
                    jTextFieldItem.requestFocus();
                }
            } else {
                JOptionPane.showMessageDialog(this,
                            "Nenhuma lista está selecionada. Por favor, selecione uma lista para criar um item.",
                            "Lista não selecionada",
                            JOptionPane.ERROR_MESSAGE);
            }
        } catch(Exception e) {
                JOptionPane.showMessageDialog(this,
                            "Ocorreu um erro ao tentar criar o item. Por favor, tente novamente.",
                            "Ocorreu um erro",
                            JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButtonCriarItemActionPerformed

    // Editar a descrição de um item
    private void jButtonEditarItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEditarItemActionPerformed
        DefaultTableModel items = (DefaultTableModel)jTableItems.getModel();
        if(jTableItems.getSelectionModel().isSelectionEmpty()) {
            JOptionPane.showMessageDialog(this,
                        "Dados não atualizados: favor selecionar o item a ser alterado.",
                        "Falha de atualização",
                        JOptionPane.ERROR_MESSAGE);
        } else if(jTextFieldItem.getText().equals("")) {
            JOptionPane.showMessageDialog(this,
                        "Item não alterado: o item deve ter uma descrição.",
                        "Campo não preenchido",
                        JOptionPane.ERROR_MESSAGE);
                jTextFieldItem.requestFocus();
        } else {
            try {
                dao.alterar(new Item(Integer.parseInt(jTableItems.getValueAt(jTableItems.getSelectedRow(), 0).toString()), jTextFieldItem.getText()));
                jTableItems.getSelectionModel().clearSelection();
                limpaCampoItem();
                buscaItemsPorLista();
                preencherItems(items);
                JOptionPane.showMessageDialog(this,
                                "Item atualizado com sucesso!",
                                "Atualização concluída",
                                JOptionPane.INFORMATION_MESSAGE);
            } catch(Exception e) {
                JOptionPane.showMessageDialog(this,
                "Ocorreu um erro ao tentar alterar o item. Por favor, tente novamente.",
                "Ocorreu um erro",
                JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jButtonEditarItemActionPerformed

    // Excluir um item
    private void jButtonExcluirItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExcluirItemActionPerformed
        DefaultTableModel items = (DefaultTableModel)jTableItems.getModel();
        if(jTableItems.getSelectionModel().isSelectionEmpty()) {
            JOptionPane.showMessageDialog(this,
                        "Nenhum item excluído: favor selecionar o item a ser excluído.",
                        "Falha ao excluir",
                        JOptionPane.ERROR_MESSAGE);
        } else {
            try {
                dao.excluir(Integer.parseInt(jTableItems.getValueAt(jTableItems.getSelectedRow(), 0).toString()), dao.getPropItem());
                jTableItems.getSelectionModel().clearSelection();
                limpaCampoItem();
                buscaItemsPorLista();
                preencherItems(items);
                JOptionPane.showMessageDialog(this,
                                "Item excluído com sucesso!",
                                "Item excluído",
                                JOptionPane.INFORMATION_MESSAGE);
            } catch(Exception e) {
                JOptionPane.showMessageDialog(this,
                            "Ocorreu um erro ao tentar excluir o item. Por favor, tente novamente.",
                            "Ocorreu um erro",
                            JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jButtonExcluirItemActionPerformed

    // Alterar o status de um item
    private void jButtonStatusItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonStatusItemActionPerformed
        DefaultTableModel items = (DefaultTableModel)jTableItems.getModel();
        if(jTableItems.getSelectionModel().isSelectionEmpty()) {
            JOptionPane.showMessageDialog(this,
                        "Status não atualizado: favor selecionar o item a ser alterado.",
                        "Falha de atualização",
                        JOptionPane.ERROR_MESSAGE);
        } else {
            try {
                boolean novoStatus = false;
                if (jTableItems.getValueAt(jTableItems.getSelectedRow(), 2).toString().equals("Pendente")) {
                    novoStatus = true;
                }
                dao.mudarStatus(Integer.parseInt(jTableItems.getValueAt(jTableItems.getSelectedRow(), 0).toString()), novoStatus);
                jTableItems.getSelectionModel().clearSelection();
                limpaCampoItem();
                buscaItemsPorLista();
                preencherItems(items);
                JOptionPane.showMessageDialog(this,
                                "Item atualizado com sucesso!",
                                "Atualização concluída",
                                JOptionPane.INFORMATION_MESSAGE);
            } catch(Exception e) {
                JOptionPane.showMessageDialog(this,
                "Ocorreu um erro ao tentar alterar o item. Por favor, tente novamente.",
                "Ocorreu um erro",
                JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jButtonStatusItemActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        DefaultTableModel listas = (DefaultTableModel)jTableListas.getModel();
        dao.consultarTodos(dao.getPropLista());
        preencherListas(listas);
    }//GEN-LAST:event_formWindowOpened

    // Atualiza tabela de listas conforme digitação
    private void jTextFieldListaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldListaKeyReleased
        if(jTableListas.getSelectionModel().isSelectionEmpty() && dao.consultarEspecificoLista(new Lista(jTextFieldLista.getText()))) {
            DefaultTableModel listas = (DefaultTableModel)jTableListas.getModel();
            preencherListas(listas);
        }
    }//GEN-LAST:event_jTextFieldListaKeyReleased

    // Atualiza tabela de items conforme lista selecionada e digitação
    private void jTextFieldItemKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldItemKeyReleased
        if(!jTableListas.getSelectionModel().isSelectionEmpty() && jTableItems.getSelectionModel().isSelectionEmpty() 
                && dao.consultarEspecificoItems(jTextFieldItem.getText(), 
                        Integer.parseInt(jTableListas.getValueAt(jTableListas.getSelectedRow(), 0).toString()))) {
            DefaultTableModel items = (DefaultTableModel)jTableItems.getModel();
            preencherItems(items);
        }
    }//GEN-LAST:event_jTextFieldItemKeyReleased

    // Preenche tabela de items conforme lista selecionada
    private void jTableListasMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableListasMouseReleased
        if(dao.consultarEspecificoItems(jTextFieldItem.getText(), 
                        Integer.parseInt(jTableListas.getValueAt(jTableListas.getSelectedRow(), 0).toString()))) {
            DefaultTableModel items = (DefaultTableModel)jTableItems.getModel();
            preencherItems(items);
        }
        
    }//GEN-LAST:event_jTableListasMouseReleased

    // Métodos para limpar os campos de entrada de texto
    private void limpaCampoLista() {
        jTextFieldLista.setText("");
    }
    
    private void limpaCampoItem() {
        jTextFieldItem.setText("");
    }
    
    // Método para buscar todos os items de uma lista
    private void buscaItemsPorLista() {
        dao.consultarEspecificoItems(jTextFieldItem.getText(), 
                        Integer.parseInt(jTableListas.getValueAt(jTableListas.getSelectedRow(), 0).toString()));
    }

    // Métodos para preencher as tabelas
    private void preencherListas(DefaultTableModel modelo) {
        try {
            ResultSet rs = dao.getResultSet();
            DefaultTableModel lista = modelo;
            lista.setRowCount(0);
            while(rs != null && rs.next()) {
                ResultSetMetaData rsmd = rs.getMetaData();
                Vector v = new Vector();
                for (int i = 1; i <= rsmd.getColumnCount(); i++) {
                    if (rsmd.getColumnType(i) == Types.VARCHAR
                            || rsmd.getColumnClassName(i).equalsIgnoreCase("java.lang.String")) {//para string
                        v.addElement(rs.getString(i));
                    } else if (rsmd.getColumnType(i) == Types.INTEGER) {//para inteiros
                        v.addElement(new Long(rs.getLong(i)));
                    }
                }
                lista.addRow(v);
            }
        } catch(SQLException e) {
            JOptionPane.showMessageDialog(this,
                        "Ocorreu um erro ao popular a lista com os elementos armazenados no Banco de Dados.",
                        "Falha de Banco de Dados",
                        JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void preencherItems(DefaultTableModel modelo) {
        try {
            ResultSet rs = dao.getResultSet();
            DefaultTableModel items = modelo;
            items.setRowCount(0);
            while(rs != null && rs.next()) {
                ResultSetMetaData rsmd = rs.getMetaData();
                Vector v = new Vector();
                for (int i = 1; i <= rsmd.getColumnCount(); i++) {
                    if (rsmd.getColumnType(i) == Types.VARCHAR
                            || rsmd.getColumnClassName(i).equalsIgnoreCase("java.lang.String")) {//para string
                        v.addElement(rs.getString(i));
                    } else if (rsmd.getColumnType(i) == Types.INTEGER) {//para inteiros
                        if (rsmd.getColumnName(i).equalsIgnoreCase("item_id")) {
                            v.addElement(new Long(rs.getLong(i)));
                        }
                    } else {
                        if(rs.getBoolean(i) == true) {
                            v.addElement("Feito");
                        } else {
                            v.addElement("Pendente");
                        }
                    }
                }
                items.addRow(v);
            }
        } catch(SQLException e) {
            JOptionPane.showMessageDialog(this,
                        "Ocorreu um erro ao popular a lista com os elementos armazenados no Banco de Dados.",
                        "Falha de Banco de Dados",
                        JOptionPane.ERROR_MESSAGE);
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCriarItem;
    private javax.swing.JButton jButtonCriarLista;
    private javax.swing.JButton jButtonEditarItem;
    private javax.swing.JButton jButtonEditarLista;
    private javax.swing.JButton jButtonExcluirItem;
    private javax.swing.JButton jButtonExcluirLista;
    private javax.swing.JButton jButtonStatusItem;
    private javax.swing.JLabel jLabelDescItem;
    private javax.swing.JLabel jLabelHeader;
    private javax.swing.JLabel jLabelItems;
    private javax.swing.JLabel jLabelListas;
    private javax.swing.JLabel jLabelNomeLista;
    private javax.swing.JPanel jPanelBackground;
    private javax.swing.JScrollPane jScrollPaneItems;
    private javax.swing.JScrollPane jScrollPaneListas;
    private javax.swing.JTable jTableItems;
    private javax.swing.JTable jTableListas;
    private javax.swing.JTextField jTextFieldItem;
    private javax.swing.JTextField jTextFieldLista;
    // End of variables declaration//GEN-END:variables
}
